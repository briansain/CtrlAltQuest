@using CtrlAltQuest.Common.Models
@using CtrlAltQuest.Common.UI.Components
@using CtrlAltQuest.PerilsAndPricesses.UI.Components
@using MudBlazor
<MudPaper Elevation="3" Class="ma-3 pa-12">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h3" Style="display:inline">@Character.Name</MudText>
            <MudText Typo="Typo.h5" Style="display:inline" Class="pl-4">@Character.Subtitle</MudText>
        </MudItem>

        <CharacterStat Label="Resolve" Stat="Character.Resolve" SVG="PolarStar" OverrideSM="2" />
        <CharacterStat Label="Grace" Stat="Character.Grace" SVG="PolarStar" OverrideSM="2" />
        <CharacterStat Label="Wits" Stat="Character.Wits" SVG="PolarStar" OverrideSM="2" />
        <CharacterStat Label="Armor" Stat="Character.Armor" SVG="Armor" OverrideSM="2" />
        <CharacterStat Label="Health" Stat="Character.Health" SVG="Heart" OverrideSM="2" />
        @* <CharacterStat Label="Max Health" Stat="Character.MaxHealth" OverrideSM="2" /> *@

        <CharacterStat Label="Fairy Godmother" Stat="GetEnum<FairyGodmother>(Character.FairyGodmother)" OverrideSM="6"/>
        <CharacterStat Label="Gift" Stat="GetGift()" OverrideSM="6"/>
        <CharacterStat Label="Talents" Stat="@string.Join(", ", Character.Talents)" OverrideSM="12" />
        <MudItem xs="6">
            <EquipmentView Equipment="Character.Equipment" />
        </MudItem>
        <MudItem xs="6">
            <WeaponView Weapon="Character.Weapons" />
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    public PrincessCharacter Character = new PrincessCharacter()
    {
        Name = "Princess Talia",
        Subtitle = "of Misty Springs",
        FairyGodmother = FairyGodmother.Mist,
        Level = 2,
        Gift = Gift.Elemental_Connection,
        SubGift = "Water",
        Resolve = 9,
        Grace = 11,
        Wits = 13,
        Armor = 1,
        Health = 8,
        MaxHealth = 8,
        Talents = ["Alchemy", "Astronomy","Swimming","Fortune Telling"],
        Equipment =
        [
            new Equipment
            {
                Name = "Torches", 
                Quantity = 4,
                Encumbrance = 1
            },
            new Equipment
            {
                Name = "Light Armor",
                Encumbrance = 1,
                Description = "Stitched layers of cloth reinforced with leather or heavy canvas.",
            },
            new Equipment
            {
                Name = "Trapping net",
                Encumbrance = 1
            },
            new Equipment
            {
                Name = "Brass jar of incense"
            },
            new Equipment
            {
                Name = "Trail food",
                Quantity = 6,
                Encumbrance = 1
            },
            new Equipment
            {
                Name = "Fortune-telling cards"
            },
            new Equipment
            {
                Name = "Iridescent seashell"
            },
            new Equipment
            {
                Name = "A bedrool for sleeping",
                Encumbrance = 1
            },
            new Equipment
            {
                Name = "Knapsack, tinderbox, waterskin"
            }
        ],
        Weapons =
        [
            new Weapon
            {
                Name = "Dagger",
                Description = "Easily concealed. Can test GRACE instead of RESOLVE when attacking.",
                NumOfDamageDice = 1,
                DamageDice = Dice.d6,
                Encumbrance = 1
            },
            new Weapon
            {
                Name = "Sling",
                Description = "Make sure you pick up rocks to shoot.",
                Range = "Over Yonder",
                NumOfDamageDice = 1,
                DamageDice = Dice.d4
            }
        ]
    };

    private string GetEnum<TEnum>(TEnum @enum) where TEnum : struct, Enum
    {
        return Enum.GetName<TEnum>(@enum)?.Replace("_", " ") ?? string.Empty;
    }

    private string GetGift()
    {
        return $"{GetEnum<Gift>(Character.Gift)}{(!string.IsNullOrWhiteSpace(Character.SubGift) ? $" ({Character.SubGift})" : string.Empty)}";
    }

    public record PrincessCharacter
    {
        public string Name { get; init; } = string.Empty;
        public int Level { get; init; } = 0;
        public string Subtitle { get; init; } = string.Empty;
        public FairyGodmother FairyGodmother { get; init; } = FairyGodmother.Unspecified;
        public string? SubGift { get; init; }
        public Gift Gift { get; init; } = Gift.Unspecified;
        public List<string> Items { get; init; } = [];
        public List<string> Talents { get; init; } = [];
        public List<InnateAbility> InateAbilities { get; init; } = [];
        public List<SpecialAbility> SpecialAbilities { get; init; } = [];
        public int Resolve { get; init; }
        public int Grace { get; init; }
        public int Wits { get; init; }
        public int Armor { get; init; }
        public int Health { get; set; }
        public int MaxHealth { get; set; }
        public List<Equipment> Equipment { get; set; } = [];
        public List<Weapon> Weapons { get; init; } = [];
    }
    public enum FairyGodmother
    {
        Unspecified,
        Old_Woman,
        Fairy_Queen,
        Shape_Changer,
        Mist,
        Ancestor,
        Crone,
        The_Moon,
        Spirit_Of_The_Forest
    }
    public enum Gift
    {
        Unspecified,
        Elemental_Connection,
        Wild_Heart,
        Enchanting_Voice,
        Spritely_Agility,
        Kitchen_Magic,
        Healing_Touch,
        Powerful_Friendship,
        Sage_Intellect
    }
    public enum InnateAbility
    {
        Whisperer,
        Natural_Climber
    }
    public enum SpecialAbility
    {

    }
    public record Equipment
    {
        /*
        In the following lists, items that count toward your
    carrying total are marked with a (1) and Bulky
    items are marked with a (2). You can mark the
    circles on your character sheet to track how
    much you're carrying.
        */
    public required string Name { get; init; }
        public string Description { get; init; } = string.Empty;
        public int Encumbrance { get; init; } = 0;
        public int? Quantity { get; init; } = null;
    }
    public record Weapon : Equipment
    {
        public Dice DamageDice { get; init; }
        public int NumOfDamageDice { get; init; }
        public string? Range { get; init; }
    }
}