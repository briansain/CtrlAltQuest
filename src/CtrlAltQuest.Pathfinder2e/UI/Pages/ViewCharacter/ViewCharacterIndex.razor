@page "/pathfinder2e/character/{base64CharacterId}"
@using Akka.Streams
@using Akka.Streams.Dsl
@inject SessionProperties _sessionProperties;
@inject IRequiredActor<Pathfinder2eActor> requiredActor;
@inject ActorSystem _actorSystem;
@implements IDisposable
<MudGrid>
    @if (hasLoaded)
    {
        <MudItem lg="6" xs="12">
            <MudTabs Elevation="3" Rounded="true">
                <MudTabPanel Text="Character Sheet">
                    <CharacterSheetIndex />
                </MudTabPanel>
                <MudTabPanel Text="Builder">
                    @* <BuilderIndex /> *@
                </MudTabPanel>
            </MudTabs>
        </MudItem>
        <MudItem lg="6" xs="12">
            <MudTabs Elevation="3" Rounded="true">
                <MudTabPanel Text="Available Actions">
                    <AvailableActionsIndex />
                </MudTabPanel>
                <MudTabPanel Text="Notes">
                    <h1>NOTES</h1>
                </MudTabPanel>
            </MudTabs>
        </MudItem>

    }
    else
    {
        <MudItem xs="12">
            <MudPaper>
                <MudOverlay Visible="!hasLoaded" DarkBackground="true" Absolute="true">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
                </MudOverlay>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code
{
    [Inject] public required CharacterStateContainer CharacterStateContainer { get; set; }
    [Parameter] public required string Base64CharacterId { get; set; }
    public CharacterId CharacterId { get; private set; } = CharacterId.Empty;
    private bool hasLoaded = false;
    private bool initialLoad = true;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Base64CharacterId))
        {
            CharacterId = CharacterId.FromBase64(Base64CharacterId);
            CharacterStateContainer.StateChanged += async () => await this.InvokeAsync(StateChangedHandler);
            CharacterStateContainer.Initialize(CharacterId);
        }
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        //this is causing a problem when moving tabs
        _sessionProperties.AdditionalTitle = string.Empty;
        _sessionProperties.TitleChanged();
        CharacterStateContainer.Dispose();
    }

    private void StateChangedHandler()
    {
        hasLoaded = true;
        StateHasChanged();
    }
}