@using MudBlazor
@using MudBlazor.ThemeManager
@using MudBlazor.Utilities
@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
<MudThemeProvider Theme="primaryTheme" IsDarkMode="true" />
<MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation" />
@code{
static MudTheme primaryTheme = new MudTheme()
{
    PaletteDark = new PaletteDark()
    {
                Primary = "#a190bfff",
        PrimaryLighten = Colors.Blue.Default,
        PrimaryDarken = Colors.Blue.Darken2,

        Secondary = Colors.Amber.Darken1,
        SecondaryLighten = Colors.Amber.Default,
        SecondaryDarken = Colors.Amber.Darken2,

        Info = Colors.LightGreen.Default,
        Success = Colors.Blue.Default,

                AppbarBackground = "#594ae2ff",
        Background = "#303030",
                DrawerBackground = "#3b3b3bff"
    },

    LayoutProperties = new LayoutProperties()
    {
        DrawerWidthLeft = "260px",
        DrawerWidthRight = "260px"
    }
};
}
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    @* <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" /> *@
    @* <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" IsDarkMode="true" /> *@
    <NavMenu />
    <MudMainContent Style="height:100vh">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    bool _drawerOpen = false;
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme()
    {
            Theme = primaryTheme
    };

    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }
}